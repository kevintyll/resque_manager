var search_data = {"index":{"searchIndex":["capistrano","object","resque","failure","redis","plugins","chainedstatus","classoverrides","instanceoverrides","status","classoverridesandextensions","hash","worker","resquemanager","applicationhelper","engine","paginate","resquecontroller","resquehelper","resquescheduler","add_scheduled_job()","all_workers_in_pid_working()","class_filter()","class_if_current()","cleaner()","cleaner_dump()","cleaner_exec()","cleaner_list()","cleaner_stale()","clear_statuses()","completed()","configure()","continue()","continue_worker()","counter()","counter_key()","current_page()","current_section()","enqueue_to()","enqueue_to()","exception_filter()","farm_status()","filter_backtrace()","find_worker()","first_index()","first_page?()","flash_helper()","format_time()","get_rake()","get_worker_path()","id()","included()","included()","incr_counter()","ip()","kill()","last_index()","last_page?()","local_ip()","max_page()","name()","new()","overview_message()","overview_message=()","page_url()","paginated_jobs()","partial?()","path()","path_prefix()","pause()","pause_key()","pause_processing_with_pause_key()","pause_worker()","paused()","paused?()","paused?()","perform()","pid()","pids()","poll()","poll()","prune_dead_workers()","queue()","queues()","queues()","queues_in_pid()","quit()","quit()","reconnect()","redis_get_size()","redis_get_value_as_array()","remove()","remove_from_schedule()","remove_job()","resque()","restart()","restart()","restart_worker()","schedule()","schedule()","schedule=()","schedule_requeue()","show_args()","shutdown_with_multithreading()","shutdown_with_multithreading?()","start()","start()","start_scheduler()","start_worker()","startup()","stats()","status()","status_poll()","status_poll()","statuses()","stop_scheduler()","stop_worker()","tab()","thread()","throttle()","time_filter()","to_s()","total_size()","u()","unpause_processing_with_pause_key()","unregister_worker_with_pause()","url()","work_with_multithreading()","workers_in_pid()","working()","working()","readme.markdown"],"longSearchIndex":["capistrano","object","resque","resque::failure","resque::failure::redis","resque::plugins","resque::plugins::chainedstatus","resque::plugins::chainedstatus::classoverrides","resque::plugins::chainedstatus::instanceoverrides","resque::plugins::status","resque::plugins::status::classoverridesandextensions","resque::plugins::status::hash","resque::worker","resquemanager","resquemanager::applicationhelper","resquemanager::engine","resquemanager::paginate","resquemanager::resquecontroller","resquemanager::resquehelper","resquescheduler","resquemanager::resquecontroller#add_scheduled_job()","resque::worker#all_workers_in_pid_working()","resquemanager::resquehelper#class_filter()","resquemanager::resquehelper#class_if_current()","resquemanager::resquecontroller#cleaner()","resquemanager::resquecontroller#cleaner_dump()","resquemanager::resquecontroller#cleaner_exec()","resquemanager::resquecontroller#cleaner_list()","resquemanager::resquecontroller#cleaner_stale()","resquemanager::resquecontroller#clear_statuses()","resque::plugins::chainedstatus::instanceoverrides#completed()","resquemanager::configure()","resque::worker#continue()","resquemanager::resquecontroller#continue_worker()","resque::plugins::status::classoverridesandextensions#counter()","resque::plugins::status::classoverridesandextensions#counter_key()","resquemanager::resquehelper#current_page()","resquemanager::resquehelper#current_section()","resque::plugins::chainedstatus::classoverrides#enqueue_to()","resque::plugins::status::classoverridesandextensions#enqueue_to()","resquemanager::resquehelper#exception_filter()","resquescheduler::farm_status()","resque::failure::redis#filter_backtrace()","resquemanager::resquehelper#find_worker()","resquemanager::paginate#first_index()","resquemanager::paginate#first_page?()","resquemanager::resquehelper#flash_helper()","resquemanager::resquehelper#format_time()","object#get_rake()","object#get_worker_path()","resque::worker#id()","resque::plugins::chainedstatus::included()","resque::plugins::status::included()","resque::plugins::status::classoverridesandextensions#incr_counter()","resque::worker#ip()","resquemanager::resquecontroller#kill()","resquemanager::paginate#last_index()","resquemanager::paginate#last_page?()","resque::worker#local_ip()","resquemanager::paginate#max_page()","resque::plugins::chainedstatus::instanceoverrides#name()","resquemanager::paginate::new()","resque::worker#overview_message()","resque::worker#overview_message=()","resquemanager::paginate#page_url()","resquemanager::paginate#paginated_jobs()","resquemanager::resquehelper#partial?()","resque::worker#path()","resquemanager::resquehelper#path_prefix()","resque::worker#pause()","resque::worker#pause_key()","resque::worker#pause_processing_with_pause_key()","resquemanager::resquecontroller#pause_worker()","resque::worker#paused()","resque::plugins::status::hash#paused?()","resque::worker#paused?()","resque::plugins::status::classoverridesandextensions#perform()","resque::worker#pid()","resquescheduler::pids()","resquemanager::resquecontroller#poll()","resquemanager::resquehelper#poll()","resque::worker#prune_dead_workers()","resque::worker#queue()","resque::worker#queues()","resquemanager::resquecontroller#queues()","resque::worker#queues_in_pid()","resque::worker#quit()","resquescheduler::quit()","resque::worker#reconnect()","resquemanager::resquehelper#redis_get_size()","resquemanager::resquehelper#redis_get_value_as_array()","resque::plugins::status::classoverridesandextensions#remove()","resquemanager::resquecontroller#remove_from_schedule()","resquemanager::resquecontroller#remove_job()","resquemanager::resquehelper#resque()","resque::worker#restart()","resquescheduler::restart()","resquemanager::resquecontroller#restart_worker()","resquemanager::resquecontroller#schedule()","resquescheduler#schedule()","resquescheduler#schedule=()","resquemanager::resquecontroller#schedule_requeue()","resquemanager::resquehelper#show_args()","resque::worker#shutdown_with_multithreading()","resque::worker#shutdown_with_multithreading?()","resque::worker::start()","resquescheduler::start()","resquemanager::resquecontroller#start_scheduler()","resquemanager::resquecontroller#start_worker()","resque::worker#startup()","resquemanager::resquecontroller#stats()","resquemanager::resquecontroller#status()","resquemanager::resquecontroller#status_poll()","resquemanager::resquehelper#status_poll()","resquemanager::resquecontroller#statuses()","resquemanager::resquecontroller#stop_scheduler()","resquemanager::resquecontroller#stop_worker()","resquemanager::resquehelper#tab()","resque::worker#thread()","resque::throttle()","resquemanager::resquehelper#time_filter()","resque::worker#to_s()","resquemanager::paginate#total_size()","resquemanager::resquehelper#u()","resque::worker#unpause_processing_with_pause_key()","resque::worker#unregister_worker_with_pause()","resquemanager::resquehelper#url()","resque::worker#work_with_multithreading()","resque::worker#workers_in_pid()","resque::worker::working()","resquemanager::resquecontroller#working()",""],"info":[["Capistrano","","Capistrano.html","",""],["Object","","Object.html","",""],["Resque","","Resque.html","",""],["Resque::Failure","","Resque/Failure.html","",""],["Resque::Failure::Redis","","Resque/Failure/Redis.html","",""],["Resque::Plugins","","Resque/Plugins.html","",""],["Resque::Plugins::ChainedStatus","","Resque/Plugins/ChainedStatus.html","",""],["Resque::Plugins::ChainedStatus::ClassOverrides","","Resque/Plugins/ChainedStatus/ClassOverrides.html","",""],["Resque::Plugins::ChainedStatus::InstanceOverrides","","Resque/Plugins/ChainedStatus/InstanceOverrides.html","",""],["Resque::Plugins::Status","","Resque/Plugins/Status.html","",""],["Resque::Plugins::Status::ClassOverridesAndExtensions","","Resque/Plugins/Status/ClassOverridesAndExtensions.html","",""],["Resque::Plugins::Status::Hash","","Resque/Plugins/Status/Hash.html","",""],["Resque::Worker","","Resque/Worker.html","",""],["ResqueManager","","ResqueManager.html","",""],["ResqueManager::ApplicationHelper","","ResqueManager/ApplicationHelper.html","",""],["ResqueManager::Engine","","ResqueManager/Engine.html","",""],["ResqueManager::Paginate","","ResqueManager/Paginate.html","","<p>Pagination helper for list page.\n"],["ResqueManager::ResqueController","","ResqueManager/ResqueController.html","",""],["ResqueManager::ResqueHelper","","ResqueManager/ResqueHelper.html","",""],["ResqueScheduler","","ResqueScheduler.html","",""],["add_scheduled_job","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-add_scheduled_job","()",""],["all_workers_in_pid_working","Resque::Worker","Resque/Worker.html#method-i-all_workers_in_pid_working","()",""],["class_filter","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-class_filter","(id, name, klasses, value)",""],["class_if_current","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-class_if_current","(page = '')",""],["cleaner","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-cleaner","()",""],["cleaner_dump","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-cleaner_dump","()",""],["cleaner_exec","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-cleaner_exec","()",""],["cleaner_list","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-cleaner_list","()",""],["cleaner_stale","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-cleaner_stale","()",""],["clear_statuses","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-clear_statuses","()",""],["completed","Resque::Plugins::ChainedStatus::InstanceOverrides","Resque/Plugins/ChainedStatus/InstanceOverrides.html#method-i-completed","(*messages)",""],["configure","ResqueManager","ResqueManager.html#method-c-configure","()",""],["continue","Resque::Worker","Resque/Worker.html#method-i-continue","()",""],["continue_worker","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-continue_worker","()",""],["counter","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-counter","(counter, uuid)",""],["counter_key","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-counter_key","(counter, uuid)","<p>If multiple workers are running at once and you need an incrementer, you\ncan&#39;t use the status&#39; …\n"],["current_page","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-current_page","()",""],["current_section","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-current_section","()",""],["enqueue_to","Resque::Plugins::ChainedStatus::ClassOverrides","Resque/Plugins/ChainedStatus/ClassOverrides.html#method-i-enqueue_to","(queue, klass, options = {})","<p>OVERRIDE to grab the uuid out of options so it can be chained to the\ncalling worker instead of creating …\n"],["enqueue_to","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-enqueue_to","(queue, klass, options = {})","<p>OVERRIDE to set the name that will be displayed on the status page for this\njob when it is first queued. …\n"],["exception_filter","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-exception_filter","(id, name, exceptions, value)",""],["farm_status","ResqueScheduler","ResqueScheduler.html#method-c-farm_status","()",""],["filter_backtrace","Resque::Failure::Redis","Resque/Failure/Redis.html#method-i-filter_backtrace","(backtrace)",""],["find_worker","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-find_worker","(worker)",""],["first_index","ResqueManager::Paginate","ResqueManager/Paginate.html#method-i-first_index","()",""],["first_page?","ResqueManager::Paginate","ResqueManager/Paginate.html#method-i-first_page-3F","()",""],["flash_helper","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-flash_helper","()",""],["format_time","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-format_time","(t)",""],["get_rake","Object","Object.html#method-i-get_rake","()",""],["get_worker_path","Object","Object.html#method-i-get_worker_path","()",""],["id","Resque::Worker","Resque/Worker.html#method-i-id","()",""],["included","Resque::Plugins::ChainedStatus","Resque/Plugins/ChainedStatus.html#method-c-included","(base)",""],["included","Resque::Plugins::Status","Resque/Plugins/Status.html#method-c-included","(base)","<p>OVERRIDE so we can add OverridesAndExtensionsClassMethods\n"],["incr_counter","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-incr_counter","(counter, uuid)",""],["ip","Resque::Worker","Resque/Worker.html#method-i-ip","()",""],["kill","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-kill","()",""],["last_index","ResqueManager::Paginate","ResqueManager/Paginate.html#method-i-last_index","()",""],["last_page?","ResqueManager::Paginate","ResqueManager/Paginate.html#method-i-last_page-3F","()",""],["local_ip","Resque::Worker","Resque/Worker.html#method-i-local_ip","()",""],["max_page","ResqueManager::Paginate","ResqueManager/Paginate.html#method-i-max_page","()",""],["name","Resque::Plugins::ChainedStatus::InstanceOverrides","Resque/Plugins/ChainedStatus/InstanceOverrides.html#method-i-name","()","<p>OVERRIDE to just use the name of it&#39;s parent job.\n"],["new","ResqueManager::Paginate","ResqueManager/Paginate.html#method-c-new","(jobs, url, page=1, page_size=20)",""],["overview_message","Resque::Worker","Resque/Worker.html#method-i-overview_message","()",""],["overview_message=","Resque::Worker","Resque/Worker.html#method-i-overview_message-3D","(message)",""],["page_url","ResqueManager::Paginate","ResqueManager/Paginate.html#method-i-page_url","(page)",""],["paginated_jobs","ResqueManager::Paginate","ResqueManager/Paginate.html#method-i-paginated_jobs","()",""],["partial?","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-partial-3F","()",""],["path","Resque::Worker","Resque/Worker.html#method-i-path","()",""],["path_prefix","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-path_prefix","()",""],["pause","Resque::Worker","Resque/Worker.html#method-i-pause","()",""],["pause_key","Resque::Worker","Resque/Worker.html#method-i-pause_key","()","<p>When the worker gets the -USR2 signal, to_s may give a different value for\nthe thread and queue portion …\n"],["pause_processing_with_pause_key","Resque::Worker","Resque/Worker.html#method-i-pause_processing_with_pause_key","()","\n<pre>Stop processing jobs after the current one has completed (if we&#39;re\ncurrently running one).</pre>\n<p>OVERRIDE to …\n"],["pause_worker","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-pause_worker","()",""],["paused","Resque::Worker","Resque/Worker.html#method-i-paused","()",""],["paused?","Resque::Plugins::Status::Hash","Resque/Plugins/Status/Hash.html#method-i-paused-3F","()","<p>The STATUSES constant is frozen, so we&#39;ll just manually add the paused?\nmethod here\n"],["paused?","Resque::Worker","Resque/Worker.html#method-i-paused-3F","()","<p>are we paused? OVERRIDE so UI can tell if we&#39;re paused\n"],["perform","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-perform","(uuid=nil, options = {})","<p>This is the method called by Resque::Worker when processing jobs. It\ncreates a new instance of the job …\n"],["pid","Resque::Worker","Resque/Worker.html#method-i-pid","()",""],["pids","ResqueScheduler","ResqueScheduler.html#method-c-pids","()","<p>Returns an array of string pids of all the other workers on this machine.\nUseful when pruning dead workers …\n"],["poll","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-poll","()",""],["poll","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-poll","()",""],["prune_dead_workers","Resque::Worker","Resque/Worker.html#method-i-prune_dead_workers","()","<p>Looks for any workers which should be running on this server and, if\nthey&#39;re not, removes them from …\n"],["queue","Resque::Worker","Resque/Worker.html#method-i-queue","()",""],["queues","Resque::Worker","Resque/Worker.html#method-i-queues","()","<p>OVERRIDE for multithreaded workers\n"],["queues","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-queues","()",""],["queues_in_pid","Resque::Worker","Resque/Worker.html#method-i-queues_in_pid","()",""],["quit","Resque::Worker","Resque/Worker.html#method-i-quit","()",""],["quit","ResqueScheduler","ResqueScheduler.html#method-c-quit","(ips)",""],["reconnect","Resque::Worker","Resque/Worker.html#method-i-reconnect","()","<p>override so we can synchronize the client on the reconnect for\nmultithreaded workers.\n"],["redis_get_size","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-redis_get_size","(key)",""],["redis_get_value_as_array","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-redis_get_value_as_array","(key)",""],["remove","Resque::Plugins::Status::ClassOverridesAndExtensions","Resque/Plugins/Status/ClassOverridesAndExtensions.html#method-i-remove","(uuid)","<p>OVERRIDE to clear all the keys that have the UUI. status, counters, etc.\n"],["remove_from_schedule","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-remove_from_schedule","()",""],["remove_job","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-remove_job","()",""],["resque","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-resque","()",""],["restart","Resque::Worker","Resque/Worker.html#method-i-restart","()",""],["restart","ResqueScheduler","ResqueScheduler.html#method-c-restart","(ips)",""],["restart_worker","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-restart_worker","()",""],["schedule","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-schedule","()","<p>resque-scheduler actions\n"],["schedule","ResqueScheduler","ResqueScheduler.html#method-i-schedule","()","<p>Returns the schedule hash\n"],["schedule=","ResqueScheduler","ResqueScheduler.html#method-i-schedule-3D","(schedule_hash)",""],["schedule_requeue","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-schedule_requeue","()",""],["show_args","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-show_args","(args)",""],["shutdown_with_multithreading","Resque::Worker","Resque/Worker.html#method-i-shutdown_with_multithreading","()","\n<pre>Schedule this worker for shutdown. Will finish processing the\ncurrent job.</pre>\n<p>OVERRIDE for multithreaded …\n"],["shutdown_with_multithreading?","Resque::Worker","Resque/Worker.html#method-i-shutdown_with_multithreading-3F","()",""],["start","Resque::Worker","Resque/Worker.html#method-c-start","(options)",""],["start","ResqueScheduler","ResqueScheduler.html#method-c-start","(ips)",""],["start_scheduler","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-start_scheduler","()",""],["start_worker","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-start_worker","()",""],["startup","Resque::Worker","Resque/Worker.html#method-i-startup","()","\n<pre>Runs all the methods needed when a worker begins its lifecycle.</pre>\n<p>OVERRIDE for multithreaded workers\n"],["stats","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-stats","()",""],["status","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-status","()",""],["status_poll","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-status_poll","()",""],["status_poll","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-status_poll","(start)",""],["statuses","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-statuses","()","<p>resque-status actions\n"],["stop_scheduler","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-stop_scheduler","()",""],["stop_worker","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-stop_worker","()",""],["tab","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-tab","(name)",""],["thread","Resque::Worker","Resque/Worker.html#method-i-thread","()",""],["throttle","Resque","Resque.html#method-c-throttle","(queue, limit = 10000, sleep_for = 60)",""],["time_filter","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-time_filter","(id, name, value)","<p>resque-cleaner helpers\n"],["to_s","Resque::Worker","Resque/Worker.html#method-i-to_s","()","<p>The string representation is the same as the id for this worker instance.\nCan be used with `Worker.find`. …\n"],["total_size","ResqueManager::Paginate","ResqueManager/Paginate.html#method-i-total_size","()",""],["u","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-u","(*path_parts)",""],["unpause_processing_with_pause_key","Resque::Worker","Resque/Worker.html#method-i-unpause_processing_with_pause_key","()","\n<pre>Start processing jobs again after a pause</pre>\n<p>OVERRIDE to set remove redis key so UI knows it&#39;s unpaused …\n"],["unregister_worker_with_pause","Resque::Worker","Resque/Worker.html#method-i-unregister_worker_with_pause","(exception = nil)","<p>Unregisters ourself as a worker. Useful when shutting down. OVERRIDE to\nalso remove the pause key Would …\n"],["url","ResqueManager::ResqueHelper","ResqueManager/ResqueHelper.html#method-i-url","(*path_parts)",""],["work_with_multithreading","Resque::Worker","Resque/Worker.html#method-i-work_with_multithreading","(interval = 5.0, &block)","\n<pre>This is the main workhorse method. Called on a Worker instance,\nit begins the worker life cycle.\n\nThe ...</pre>\n"],["workers_in_pid","Resque::Worker","Resque/Worker.html#method-i-workers_in_pid","()",""],["working","Resque::Worker","Resque/Worker.html#method-c-working","()","<p>logic for mappged_mget changed where it returns keys with nil values in\nlatest redis gem.\n"],["working","ResqueManager::ResqueController","ResqueManager/ResqueController.html#method-i-working","()",""],["README.markdown","","README_markdown.html","","<p>Resque UI has been renamed to Resque Manager to better reflect what this\nengine really does. It manages …\n"]]}}