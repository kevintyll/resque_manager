== 3.3.7 2013-2-3

*  Clean up the nohup calls.  nohup only spawns another process when output is redirected 2>&1.

== 3.3.6 2013-2-3

*  base.include throws and error on jruby.  Use base.class_eval instead.

== 3.3.5 2013-2-3

*  Use alias_method_chain on overridden worker methods so we don't have to rewrite the entire method.  Prevents breaking changes when resque gets upgraded.
*  Added a dependency on semantic_logger for better log messages
*  Add a sleep to the work cap task so cap will respect the & with the nohup and release the process.

== 3.3.4 2013-1-30

*  Add an & to the end of the resque work cap task so the nohup will release the process.

== 3.3.3 2013-12-20

*  Add capistrano as a dependency
*  Bug fixes

== 3.3.2 2013-11-1

*  Fixed test suite so it will run under rake.
*  Fixed status and statuses actions and tests
*  Preload the app for workers.  Added a new denpendency on the worker rake task to remove the controllers from the eager_load_paths.  They aren't needed for workers and may cause load errors.

== 3.3.1 2013-10-31

*  Test suite added.  Fixed a few bugs around resque_scheduler, and pausing and stopping workers.  Thank you very much Andrew Medeiros!

== 3.3.0 2013-08-28

*  Change name to resque_manager
*  Convert the gem to a true mountable rails engine
*  Use upgraded resque_status gem
*  Make compatible with rails 3.2

== 3.2.4 2011-12-08

*  Override the filter_backtrace method for the redis backend failure object introduced in resque 1.18.0.
   Filter needs to be different for resque_ui, otherwise backtrace is always an empty array on the cleaner page.

== 3.2.3 2011-11-15

*  Fixes resque-cleaner UI bug.  It was always showing Just now for when the job was retried.

== 3.2.2 2011-11-15

*  Initialize the worker to nil.

== 3.2.1 2011-11-14

*  I know that was in there before.

== 3.2.0 2011-11-14

*  Added the ability to pause workers from the UI.
*  If the worker is processing a job, it will pause the job on the next call to tick.
*  JobWithStatus class now exposed the worker so the job can manually inspect the worker's status if necessary.

== 3.1.7 2011-11-03

*  It seems that when jruby workers are started in server mode, they don't accept the -INT signal.
   Changed the logic to send the -TERM signal if jruby, and -QUIT otherwise.
   -TERM gracefully kills the main pid and does a -9 on the child if there is one.
   Since jruby doesn't fork a child, the main worker is gracefully killed.

== 3.1.6 2011-11-02

*  Need the resque:restart cap task to pass the resque_rake value to the resque:restart rake task so it can start workers with the modified rake options

== 3.1.5 2011-11-01

*  Added the ability to set an optional :resque_rake variable in your deploy.rb file that is used by the resque:work task if set.
   -This allows you to set alternate options, particularly useful for jruby.
    ex.
    go through jexec so we get the right path and java settings
     set :rake, "script/jexec rake"
     set :resque_rake, "script/jexec -p rake" #extra memory settings for resque workers

    -the jexec file in script/ may look like:

    scriptdir=`dirname $0`

    # Hack to get things working under capistrano (used for torquebox to get rake working, still needed?)
    if [ "$1" = "-j" ]; then
        shift
        export JRUBY_HOME=$1
        shift
    fi

    if [ "$1" = "-m" ]; then
            shift
            export JAVA_MEM="-Xmx2048m -Xms256m -XX:PermSize=1024m -XX:MaxPermSize=1024m"
            export JAVA_STACK=-Xss4096k
    fi

    export PATH=$scriptdir:/opt/jruby/bin:$PATH

    # Configuration settings for all Rake Tasks and Resque Workers
    if [ "$1" = "-p" ]; then
            shift
            # Set Heap Space for Young/Eden GC: 512MB
            # Initial Heap size: 2GB
            # Max Heap size: 4GB
            # Use server JVM
            # PermGenSize: 64MB
            # Max PermGenSize: 128MB
            # Thread Stack Size: 1024k
            export JRUBY_OPTS="-J-Xmn512m -J-Xms2048m -J-Xmx4096m -J-server -J-XX:PermSize=64m -J-XX:MaxPermSize=128m -J-Xss1024k"
            echo "JRUBY_OPTS=${JRUBY_OPTS}"
            nohup $* & #cap task runs in background
    else
            exec $*
    fi

== 3.1.4 2011-10-27

*  Changed all the cap tasks to use the :resque role.
    - You now need to define the :resque role in your deploy/<environment>.rb file with the servers that will run your workers.
        role :resque, 'server1', 'server2'
      The cap tasks used to run the :app role, but this has been changed to allow you to better refine your servers.  You may not run
      the resque workers on all, or even any of your :app servers.

== 3.1.3 2011-10-24

*  Guard against nil in templates

== 3.1.2 2011-10-13

*  Fix a typo

== 3.1.1 2011-10-13

*  Modified the restart_workers and quit_workers cap tasks to no longer use the , :only => {:resque_restart => true} flag.
    -   These tasks now execute the rake tasks on all servers in the farm
*  Modified the restart_workers and quit_workers rake tasks to not execute separate cap tasks for each worker.
    -   Task now iterates through the workers and restarts the ones on the box the rake task is executing on.

== 3.1.0 2011-09-22

*  Added Resque Cleaner to manage the failed queue.  Removed the Failed tab.

== 3.0.0 2011-09-16

*  converted plugging to a gem/engine for Rails 3


